schema {
  query: RootQuery
  mutation: RootMutation
}

input CreateOneUserInput {
  name: String
  age: Float
  languages: Generic
  contacts: UserContactsContactsundefined
  gender: EnumUserGender
}

type CreateOneUserPayload {
  recordId: MongoID
  record: User
}

enum EnumUserGender {
  male
  female
  ladyboy
}

input FilterFindManyUserInput {
  name: String
  age: Float
  languages: Generic
  contacts: UserContactsContactsundefined
  gender: EnumUserGender
  _id: MongoID!
}

input FilterFindOneUserInput {
  name: String
  age: Float
  languages: Generic
  contacts: UserContactsContactsundefined
  gender: EnumUserGender
  _id: MongoID!
}

input FilterRemoveManyUserInput {
  name: String
  age: Float
  languages: Generic
  contacts: UserContactsContactsundefined
  gender: EnumUserGender
  _id: MongoID!
}

input FilterRemoveOneUserInput {
  name: String
  age: Float
  languages: Generic
  contacts: UserContactsContactsundefined
  gender: EnumUserGender
  _id: MongoID!
}

input FilterUpdateManyUserInput {
  name: String
  age: Float
  languages: Generic
  contacts: UserContactsContactsundefined
  gender: EnumUserGender
  _id: MongoID!
}

input FilterUpdateOneUserInput {
  name: String
  age: Float
  languages: Generic
  contacts: UserContactsContactsundefined
  gender: EnumUserGender
  _id: MongoID!
}

input FilterUserInput {
  name: String
  age: Float
  languages: Generic
  contacts: UserContactsContactsundefined
  gender: EnumUserGender
  _id: MongoID!
}

scalar Generic

scalar MongoID

type RemoveByIdUserPayload {
  recordId: MongoID
  record: User
}

type RemoveManyUserPayload {
  numAffected: Int
}

type RemoveOneUserPayload {
  recordId: MongoID
  record: User
}

type RootMutation {
  userCreate(input: CreateOneUserInput!): CreateOneUserPayload
  userUpdateById(input: UpdateByIdUserInput!): UpdateByIdUserPayload
  userUpdateOne(input: UpdateOneUserInput!, filter: FilterUpdateOneUserInput, sort: SortUpdateOneUserInput, skip: Int): UpdateOneUserPayload
  userUpdateMany(input: UpdateManyUserInput!, filter: FilterUpdateManyUserInput, sort: SortUpdateManyUserInput, skip: Int, limit: Int = 1000): UpdateManyUserPayload
  userRemoveById(_id: MongoID!): RemoveByIdUserPayload
  userRemoveOne(filter: FilterRemoveOneUserInput, sort: SortRemoveOneUserInput): RemoveOneUserPayload
  userRemoveMany(filter: FilterRemoveManyUserInput!): RemoveManyUserPayload
}

type RootQuery {
  userById(_id: MongoID!): User
  userByIds(_ids: [MongoID]!, limit: Int = 1000, sort: SortFindByIdsUserInput): [User]
  userOne(filter: FilterFindOneUserInput, skip: Int, sort: SortFindOneUserInput): User
  userMany(filter: FilterFindManyUserInput, skip: Int, limit: Int = 1000, sort: SortFindManyUserInput): [User]
  userTotal(filter: FilterUserInput): Int
}

enum SortFindByIdsUserInput {
  _ID_ASC
  _ID_DESC
  AGE_ASC
  AGE_DESC
}

enum SortFindManyUserInput {
  _ID_ASC
  _ID_DESC
  AGE_ASC
  AGE_DESC
}

enum SortFindOneUserInput {
  _ID_ASC
  _ID_DESC
  AGE_ASC
  AGE_DESC
}

enum SortRemoveOneUserInput {
  _ID_ASC
  _ID_DESC
  AGE_ASC
  AGE_DESC
}

enum SortUpdateManyUserInput {
  _ID_ASC
  _ID_DESC
  AGE_ASC
  AGE_DESC
}

enum SortUpdateOneUserInput {
  _ID_ASC
  _ID_DESC
  AGE_ASC
  AGE_DESC
}

input UpdateByIdUserInput {
  name: String
  age: Float
  languages: Generic
  contacts: UserContactsContactsundefined
  gender: EnumUserGender
  _id: MongoID!
}

type UpdateByIdUserPayload {
  recordId: MongoID
  record: User
}

input UpdateManyUserInput {
  name: String
  age: Float
  languages: Generic
  contacts: UserContactsContactsundefined
  gender: EnumUserGender
}

type UpdateManyUserPayload {
  numAffected: Int
}

input UpdateOneUserInput {
  name: String
  age: Float
  languages: Generic
  contacts: UserContactsContactsundefined
  gender: EnumUserGender
}

type UpdateOneUserPayload {
  recordId: MongoID
  record: User
}

type User {
  name: String
  age: Float
  languages: Generic
  contacts: UserContacts
  gender: EnumUserGender
  _id: MongoID
}

type UserContacts {
  email: String
  phones: [String]
}

input UserContactsContactsundefined {
  email: String
  phones: [String]
}
