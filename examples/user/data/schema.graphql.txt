input _idOperatorsFilterFindManyUserInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
}

input _idOperatorsFilterFindOneUserInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
}

input _idOperatorsFilterRemoveManyUserInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
}

input _idOperatorsFilterRemoveOneUserInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
}

input _idOperatorsFilterUpdateManyUserInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
}

input _idOperatorsFilterUpdateOneUserInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
}

input _idOperatorsFilterUserInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
}

input AgeOperatorsFilterFindManyUserInput {
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  ne: Float
  in: [Float]
  nin: [Float]
}

input AgeOperatorsFilterFindOneUserInput {
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  ne: Float
  in: [Float]
  nin: [Float]
}

input AgeOperatorsFilterRemoveManyUserInput {
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  ne: Float
  in: [Float]
  nin: [Float]
}

input AgeOperatorsFilterRemoveOneUserInput {
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  ne: Float
  in: [Float]
  nin: [Float]
}

input AgeOperatorsFilterUpdateManyUserInput {
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  ne: Float
  in: [Float]
  nin: [Float]
}

input AgeOperatorsFilterUpdateOneUserInput {
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  ne: Float
  in: [Float]
  nin: [Float]
}

input AgeOperatorsFilterUserInput {
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  ne: Float
  in: [Float]
  nin: [Float]
}

input CreateOneUserInput {
  name: String
  age: Float
  languages: [UserUserLanguagesInput]
  contacts: UserContactsInput
  gender: EnumUserGender
  address: UserAddressInput

  # Some dynamic data
  someMixed: JSON
}

type CreateOneUserPayload {
  # Created document ID
  recordId: MongoID

  # Created document
  record: User
}

enum EnumUserGender {
  male
  female
  ladyboy
}

enum EnumUserLanguagesSkill {
  basic
  fluent
  native
}

input FilterFindManyUserInput {
  name: String
  age: Float
  languages: [UserUserLanguagesInput]
  contacts: UserContactsInput
  gender: EnumUserGender
  address: UserAddressInput

  # Some dynamic data
  someMixed: JSON
  _id: MongoID
  _ids: [MongoID]

  # List of fields that can be filtered via operators
  _operators: OperatorsFilterFindManyUserInput

  # Search by distance in meters
  geoDistance: GeoDistance
}

input FilterFindOneUserInput {
  name: String
  age: Float
  languages: [UserUserLanguagesInput]
  contacts: UserContactsInput
  gender: EnumUserGender
  address: UserAddressInput

  # Some dynamic data
  someMixed: JSON
  _id: MongoID
  _ids: [MongoID]

  # List of fields that can be filtered via operators
  _operators: OperatorsFilterFindOneUserInput
}

input FilterRemoveManyUserInput {
  name: String
  age: Float
  languages: [UserUserLanguagesInput]
  contacts: UserContactsInput
  gender: EnumUserGender
  address: UserAddressInput

  # Some dynamic data
  someMixed: JSON
  _id: MongoID
  _ids: [MongoID]

  # List of fields that can be filtered via operators
  _operators: OperatorsFilterRemoveManyUserInput
}

input FilterRemoveOneUserInput {
  name: String
  age: Float
  languages: [UserUserLanguagesInput]
  contacts: UserContactsInput
  gender: EnumUserGender
  address: UserAddressInput

  # Some dynamic data
  someMixed: JSON
  _id: MongoID
  _ids: [MongoID]

  # List of fields that can be filtered via operators
  _operators: OperatorsFilterRemoveOneUserInput
}

input FilterUpdateManyUserInput {
  name: String
  age: Float
  languages: [UserUserLanguagesInput]
  contacts: UserContactsInput
  gender: EnumUserGender
  address: UserAddressInput

  # Some dynamic data
  someMixed: JSON
  _id: MongoID
  _ids: [MongoID]

  # List of fields that can be filtered via operators
  _operators: OperatorsFilterUpdateManyUserInput
}

input FilterUpdateOneUserInput {
  name: String
  age: Float
  languages: [UserUserLanguagesInput]
  contacts: UserContactsInput
  gender: EnumUserGender
  address: UserAddressInput

  # Some dynamic data
  someMixed: JSON
  _id: MongoID
  _ids: [MongoID]

  # List of fields that can be filtered via operators
  _operators: OperatorsFilterUpdateOneUserInput
}

input FilterUserInput {
  name: String
  age: Float
  languages: [UserUserLanguagesInput]
  contacts: UserContactsInput
  gender: EnumUserGender
  address: UserAddressInput

  # Some dynamic data
  someMixed: JSON
  _id: MongoID
  _ids: [MongoID]

  # List of fields that can be filtered via operators
  _operators: OperatorsFilterUserInput
}

input GenderOperatorsFilterFindManyUserInput {
  gt: EnumUserGender
  gte: EnumUserGender
  lt: EnumUserGender
  lte: EnumUserGender
  ne: EnumUserGender
  in: [EnumUserGender]
  nin: [EnumUserGender]
}

input GenderOperatorsFilterFindOneUserInput {
  gt: EnumUserGender
  gte: EnumUserGender
  lt: EnumUserGender
  lte: EnumUserGender
  ne: EnumUserGender
  in: [EnumUserGender]
  nin: [EnumUserGender]
}

input GenderOperatorsFilterRemoveManyUserInput {
  gt: EnumUserGender
  gte: EnumUserGender
  lt: EnumUserGender
  lte: EnumUserGender
  ne: EnumUserGender
  in: [EnumUserGender]
  nin: [EnumUserGender]
}

input GenderOperatorsFilterRemoveOneUserInput {
  gt: EnumUserGender
  gte: EnumUserGender
  lt: EnumUserGender
  lte: EnumUserGender
  ne: EnumUserGender
  in: [EnumUserGender]
  nin: [EnumUserGender]
}

input GenderOperatorsFilterUpdateManyUserInput {
  gt: EnumUserGender
  gte: EnumUserGender
  lt: EnumUserGender
  lte: EnumUserGender
  ne: EnumUserGender
  in: [EnumUserGender]
  nin: [EnumUserGender]
}

input GenderOperatorsFilterUpdateOneUserInput {
  gt: EnumUserGender
  gte: EnumUserGender
  lt: EnumUserGender
  lte: EnumUserGender
  ne: EnumUserGender
  in: [EnumUserGender]
  nin: [EnumUserGender]
}

input GenderOperatorsFilterUserInput {
  gt: EnumUserGender
  gte: EnumUserGender
  lt: EnumUserGender
  lte: EnumUserGender
  ne: EnumUserGender
  in: [EnumUserGender]
  nin: [EnumUserGender]
}

input GeoDistance {
  lng: Float!
  lat: Float!

  # Distance in meters
  distance: Float!
}

# The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
scalar JSON

# The `ID` scalar type represents a unique MongoDB identifier in collection.
# MongoDB by default use 12-byte ObjectId value
# (https://docs.mongodb.com/manual/reference/bson-types/#objectid). But MongoDB
# also may accepts string or integer as correct values for _id field.
scalar MongoID

type Mutation {
  # Create one document with mongoose defaults, setters, hooks and validation
  userCreate(record: CreateOneUserInput!): CreateOneUserPayload

  # Update one document: 1) Retrieve one document by findById. 2) Apply updates to
  # mongoose document. 3) Mongoose applies defaults, setters, hooks and
  # validation. 4) And save it.
  userUpdateById(record: UpdateByIdUserInput!): UpdateByIdUserPayload

  # Update one document: 1) Retrieve one document via findOne. 2) Apply updates to
  # mongoose document. 3) Mongoose applies defaults, setters, hooks and
  # validation. 4) And save it.
  userUpdateOne(
    record: UpdateOneUserInput!

    # Filter by fields
    filter: FilterUpdateOneUserInput
    sort: SortUpdateOneUserInput
    skip: Int
  ): UpdateOneUserPayload

  # Update many documents without returning them: Use Query.update mongoose
  # method. Do not apply mongoose defaults, setters, hooks and validation. 
  userUpdateMany(
    record: UpdateManyUserInput!

    # Filter by fields
    filter: FilterUpdateManyUserInput
    sort: SortUpdateManyUserInput
    skip: Int
    limit: Int = 1000
  ): UpdateManyUserPayload

  # Remove one document: 1) Retrieve one document and remove with hooks via findByIdAndRemove. 2) Return removed document.
  userRemoveById(_id: MongoID!): RemoveByIdUserPayload

  # Remove one document: 1) Remove with hooks via findOneAndRemove. 2) Return removed document.
  userRemoveOne(
    # Filter by fields
    filter: FilterRemoveOneUserInput
    sort: SortRemoveOneUserInput
  ): RemoveOneUserPayload

  # Remove many documents without returning them: Use Query.remove mongoose
  # method. Do not apply mongoose defaults, setters, hooks and validation. 
  userRemoveMany(
    # Filter by fields
    filter: FilterRemoveManyUserInput!
  ): RemoveManyUserPayload
}

input NameOperatorsFilterFindManyUserInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
}

input NameOperatorsFilterFindOneUserInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
}

input NameOperatorsFilterRemoveManyUserInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
}

input NameOperatorsFilterRemoveOneUserInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
}

input NameOperatorsFilterUpdateManyUserInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
}

input NameOperatorsFilterUpdateOneUserInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
}

input NameOperatorsFilterUserInput {
  gt: String
  gte: String
  lt: String
  lte: String
  ne: String
  in: [String]
  nin: [String]
}

input OperatorsFilterFindManyUserInput {
  # Filter value by operator(s)
  name: NameOperatorsFilterFindManyUserInput

  # Filter value by operator(s)
  age: AgeOperatorsFilterFindManyUserInput

  # Filter value by operator(s)
  gender: GenderOperatorsFilterFindManyUserInput

  # Filter value by operator(s)
  _id: _idOperatorsFilterFindManyUserInput
}

input OperatorsFilterFindOneUserInput {
  # Filter value by operator(s)
  name: NameOperatorsFilterFindOneUserInput

  # Filter value by operator(s)
  age: AgeOperatorsFilterFindOneUserInput

  # Filter value by operator(s)
  gender: GenderOperatorsFilterFindOneUserInput

  # Filter value by operator(s)
  _id: _idOperatorsFilterFindOneUserInput
}

input OperatorsFilterRemoveManyUserInput {
  # Filter value by operator(s)
  name: NameOperatorsFilterRemoveManyUserInput

  # Filter value by operator(s)
  age: AgeOperatorsFilterRemoveManyUserInput

  # Filter value by operator(s)
  gender: GenderOperatorsFilterRemoveManyUserInput

  # Filter value by operator(s)
  _id: _idOperatorsFilterRemoveManyUserInput
}

input OperatorsFilterRemoveOneUserInput {
  # Filter value by operator(s)
  name: NameOperatorsFilterRemoveOneUserInput

  # Filter value by operator(s)
  age: AgeOperatorsFilterRemoveOneUserInput

  # Filter value by operator(s)
  gender: GenderOperatorsFilterRemoveOneUserInput

  # Filter value by operator(s)
  _id: _idOperatorsFilterRemoveOneUserInput
}

input OperatorsFilterUpdateManyUserInput {
  # Filter value by operator(s)
  name: NameOperatorsFilterUpdateManyUserInput

  # Filter value by operator(s)
  age: AgeOperatorsFilterUpdateManyUserInput

  # Filter value by operator(s)
  gender: GenderOperatorsFilterUpdateManyUserInput

  # Filter value by operator(s)
  _id: _idOperatorsFilterUpdateManyUserInput
}

input OperatorsFilterUpdateOneUserInput {
  # Filter value by operator(s)
  name: NameOperatorsFilterUpdateOneUserInput

  # Filter value by operator(s)
  age: AgeOperatorsFilterUpdateOneUserInput

  # Filter value by operator(s)
  gender: GenderOperatorsFilterUpdateOneUserInput

  # Filter value by operator(s)
  _id: _idOperatorsFilterUpdateOneUserInput
}

input OperatorsFilterUserInput {
  # Filter value by operator(s)
  name: NameOperatorsFilterUserInput

  # Filter value by operator(s)
  age: AgeOperatorsFilterUserInput

  # Filter value by operator(s)
  gender: GenderOperatorsFilterUserInput

  # Filter value by operator(s)
  _id: _idOperatorsFilterUserInput
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String

  # When paginating forwards, the cursor to continue.
  endCursor: String
}

# Information about pagination.
type PaginationInfo {
  # Current page number
  currentPage: Int!

  # Number of items per page
  perPage: Int!

  # Total number of pages
  pageCount: Int

  # Total number of items
  itemCount: Int

  # When paginating forwards, are there more items?
  hasNextPage: Boolean

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean
}

type Query {
  userById(_id: MongoID!): User
  userByIds(_ids: [MongoID]!, limit: Int = 1000, sort: SortFindByIdsUserInput): [User]
  userOne(
    # Filter by fields
    filter: FilterFindOneUserInput
    skip: Int
    sort: SortFindOneUserInput
  ): User
  userMany(
    # Filter by fields
    filter: FilterFindManyUserInput
    skip: Int
    limit: Int = 1000
    sort: SortFindManyUserInput
  ): [User]
  userTotal(
    # Filter by fields
    filter: FilterUserInput
  ): Int
  userConnection(
    # Forward pagination argument for returning at most first edges
    first: Int

    # Forward pagination argument for returning at most first edges
    after: String

    # Backward pagination argument for returning at most last edges
    last: Int

    # Backward pagination argument for returning at most last edges
    before: String

    # Filter by fields
    filter: FilterFindManyUserInput

    # Sort argument for data ordering
    sort: SortConnectionUserEnum = _ID_DESC
  ): UserConnection
  userPagination(
    # Page number for displaying
    page: Int
    perPage: Int = 20

    # Filter by fields
    filter: FilterFindManyUserInput
    sort: SortFindManyUserInput
  ): UserPagination
}

type RemoveByIdUserPayload {
  # Removed document ID
  recordId: MongoID

  # Removed document
  record: User
}

type RemoveManyUserPayload {
  # Affected documents number
  numAffected: Int
}

type RemoveOneUserPayload {
  # Removed document ID
  recordId: MongoID

  # Removed document
  record: User
}

enum SortConnectionUserEnum {
  _ID_DESC
  _ID_ASC
}

enum SortFindByIdsUserInput {
  _ID_ASC
  _ID_DESC
  NAME_ASC
  NAME_DESC
  AGE_ASC
  AGE_DESC
  GENDER_ASC
  GENDER_DESC
  GENDER__AGE_ASC
  GENDER__AGE_DESC
}

enum SortFindManyUserInput {
  _ID_ASC
  _ID_DESC
  NAME_ASC
  NAME_DESC
  AGE_ASC
  AGE_DESC
  GENDER_ASC
  GENDER_DESC
  GENDER__AGE_ASC
  GENDER__AGE_DESC
}

enum SortFindOneUserInput {
  _ID_ASC
  _ID_DESC
  NAME_ASC
  NAME_DESC
  AGE_ASC
  AGE_DESC
  GENDER_ASC
  GENDER_DESC
  GENDER__AGE_ASC
  GENDER__AGE_DESC
}

enum SortRemoveOneUserInput {
  _ID_ASC
  _ID_DESC
  NAME_ASC
  NAME_DESC
  AGE_ASC
  AGE_DESC
  GENDER_ASC
  GENDER_DESC
  GENDER__AGE_ASC
  GENDER__AGE_DESC
}

enum SortUpdateManyUserInput {
  _ID_ASC
  _ID_DESC
  NAME_ASC
  NAME_DESC
  AGE_ASC
  AGE_DESC
  GENDER_ASC
  GENDER_DESC
  GENDER__AGE_ASC
  GENDER__AGE_DESC
}

enum SortUpdateOneUserInput {
  _ID_ASC
  _ID_DESC
  NAME_ASC
  NAME_DESC
  AGE_ASC
  AGE_DESC
  GENDER_ASC
  GENDER_DESC
  GENDER__AGE_ASC
  GENDER__AGE_DESC
}

input UpdateByIdUserInput {
  name: String
  age: Float
  languages: [UserUserLanguagesInput]
  contacts: UserContactsInput
  gender: EnumUserGender
  address: UserAddressInput

  # Some dynamic data
  someMixed: JSON
  _id: MongoID!
}

type UpdateByIdUserPayload {
  # Updated document ID
  recordId: MongoID

  # Updated document
  record: User
}

input UpdateManyUserInput {
  name: String
  age: Float
  languages: [UserUserLanguagesInput]
  contacts: UserContactsInput
  gender: EnumUserGender
  address: UserAddressInput

  # Some dynamic data
  someMixed: JSON
}

type UpdateManyUserPayload {
  # Affected documents number
  numAffected: Int
}

input UpdateOneUserInput {
  name: String
  age: Float
  languages: [UserUserLanguagesInput]
  contacts: UserContactsInput
  gender: EnumUserGender
  address: UserAddressInput

  # Some dynamic data
  someMixed: JSON
}

type UpdateOneUserPayload {
  # Updated document ID
  recordId: MongoID

  # Updated document
  record: User
}

type User {
  name: String
  age: Float
  languages: [UserLanguages]
  contacts: UserContacts
  gender: EnumUserGender
  address: UserAddress

  # Some dynamic data
  someMixed: JSON
  _id: MongoID
}

type UserAddress {
  street: String
  geo: [Float]
  _id: MongoID
}

input UserAddressInput {
  street: String
  geo: [Float]
  _id: MongoID
}

# A connection to a list of items.
type UserConnection {
  # Total object count.
  count: Int

  # Information to aid in pagination.
  pageInfo: PageInfo!

  # Information to aid in pagination.
  edges: [UserEdge!]!
}

type UserContacts {
  email: String
  phones: [String]
}

input UserContactsInput {
  email: String
  phones: [String]
}

# An edge in a connection.
type UserEdge {
  # The item at the end of the edge
  node: User

  # A cursor for use in pagination
  cursor: String!
}

type UserLanguages {
  language: String
  skill: EnumUserLanguagesSkill
}

# List of items with pagination.
type UserPagination {
  # Total object count.
  count: Int

  # Array of objects.
  items: [User]

  # Information to aid in pagination.
  pageInfo: PaginationInfo!
}

input UserUserLanguagesInput {
  language: String
  skill: EnumUserLanguagesSkill
}
