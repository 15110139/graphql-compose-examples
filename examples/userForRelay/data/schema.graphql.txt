schema {
  query: RootQuery
  mutation: RootMutation
}

input _idOperatorsFilterFindManyUserInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
}

input _idOperatorsFilterFindOneUserInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
}

input _idOperatorsFilterRemoveManyUserInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
}

input _idOperatorsFilterRemoveOneUserInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
}

input _idOperatorsFilterUpdateManyUserInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
}

input _idOperatorsFilterUpdateOneUserInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
}

input _idOperatorsFilterUserInput {
  gt: MongoID
  gte: MongoID
  lt: MongoID
  lte: MongoID
  ne: MongoID
  in: [MongoID]
  nin: [MongoID]
}

input AgeOperatorsFilterFindManyUserInput {
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  ne: Float
  in: [Float]
  nin: [Float]
}

input AgeOperatorsFilterFindOneUserInput {
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  ne: Float
  in: [Float]
  nin: [Float]
}

input AgeOperatorsFilterRemoveManyUserInput {
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  ne: Float
  in: [Float]
  nin: [Float]
}

input AgeOperatorsFilterRemoveOneUserInput {
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  ne: Float
  in: [Float]
  nin: [Float]
}

input AgeOperatorsFilterUpdateManyUserInput {
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  ne: Float
  in: [Float]
  nin: [Float]
}

input AgeOperatorsFilterUpdateOneUserInput {
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  ne: Float
  in: [Float]
  nin: [Float]
}

input AgeOperatorsFilterUserInput {
  gt: Float
  gte: Float
  lt: Float
  lte: Float
  ne: Float
  in: [Float]
  nin: [Float]
}

scalar ConnectionCursor

input CreateOneUserInput {
  name: String
  age: Float
  languages: [UserUserLanguagesInput]
  contacts: UserContactsInput
  gender: EnumUserGender
}

type CreateOneUserPayload {
  recordId: MongoID
  record: User
  nodeId: ID
  clientMutationId: String
}

enum EnumUserGender {
  male
  female
  ladyboy
}

enum EnumUserLanguagesSkill {
  basic
  fluent
  native
}

input FilterFindManyUserInput {
  name: String
  age: Float
  languages: [UserUserLanguagesInput]
  contacts: UserContactsInput
  gender: EnumUserGender
  _id: MongoID
  _operators: OperatorsFilterFindManyUserInput
}

input FilterFindOneUserInput {
  name: String
  age: Float
  languages: [UserUserLanguagesInput]
  contacts: UserContactsInput
  gender: EnumUserGender
  _id: MongoID
  _operators: OperatorsFilterFindOneUserInput
}

input FilterRemoveManyUserInput {
  name: String
  age: Float
  languages: [UserUserLanguagesInput]
  contacts: UserContactsInput
  gender: EnumUserGender
  _id: MongoID
  _operators: OperatorsFilterRemoveManyUserInput
}

input FilterRemoveOneUserInput {
  name: String
  age: Float
  languages: [UserUserLanguagesInput]
  contacts: UserContactsInput
  gender: EnumUserGender
  _id: MongoID
  _operators: OperatorsFilterRemoveOneUserInput
}

input FilterUpdateManyUserInput {
  name: String
  age: Float
  languages: [UserUserLanguagesInput]
  contacts: UserContactsInput
  gender: EnumUserGender
  _id: MongoID
  _operators: OperatorsFilterUpdateManyUserInput
}

input FilterUpdateOneUserInput {
  name: String
  age: Float
  languages: [UserUserLanguagesInput]
  contacts: UserContactsInput
  gender: EnumUserGender
  _id: MongoID
  _operators: OperatorsFilterUpdateOneUserInput
}

input FilterUserInput {
  name: String
  age: Float
  languages: [UserUserLanguagesInput]
  contacts: UserContactsInput
  gender: EnumUserGender
  _id: MongoID
  _operators: OperatorsFilterUserInput
}

scalar MongoID

interface Node {
  id: ID!
}

input OperatorsFilterFindManyUserInput {
  age: AgeOperatorsFilterFindManyUserInput
  _id: _idOperatorsFilterFindManyUserInput
}

input OperatorsFilterFindOneUserInput {
  age: AgeOperatorsFilterFindOneUserInput
  _id: _idOperatorsFilterFindOneUserInput
}

input OperatorsFilterRemoveManyUserInput {
  age: AgeOperatorsFilterRemoveManyUserInput
  _id: _idOperatorsFilterRemoveManyUserInput
}

input OperatorsFilterRemoveOneUserInput {
  age: AgeOperatorsFilterRemoveOneUserInput
  _id: _idOperatorsFilterRemoveOneUserInput
}

input OperatorsFilterUpdateManyUserInput {
  age: AgeOperatorsFilterUpdateManyUserInput
  _id: _idOperatorsFilterUpdateManyUserInput
}

input OperatorsFilterUpdateOneUserInput {
  age: AgeOperatorsFilterUpdateOneUserInput
  _id: _idOperatorsFilterUpdateOneUserInput
}

input OperatorsFilterUserInput {
  age: AgeOperatorsFilterUserInput
  _id: _idOperatorsFilterUserInput
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

input RelayCreateOneUserInput {
  record: CreateOneUserInput!
  clientMutationId: String
}

input RelayRemoveByIdUserInput {
  _id: MongoID!
  clientMutationId: String
}

input RelayRemoveManyUserInput {
  filter: FilterRemoveManyUserInput!
  clientMutationId: String
}

input RelayRemoveOneUserInput {
  filter: FilterRemoveOneUserInput
  sort: SortRemoveOneUserInput
  clientMutationId: String
}

input RelayUpdateByIdUserInput {
  record: UpdateByIdUserInput!
  clientMutationId: String
}

input RelayUpdateManyUserInput {
  record: UpdateManyUserInput!
  filter: FilterUpdateManyUserInput
  sort: SortUpdateManyUserInput
  skip: Int
  limit: Int = 1000
  clientMutationId: String
}

input RelayUpdateOneUserInput {
  record: UpdateOneUserInput!
  filter: FilterUpdateOneUserInput
  sort: SortUpdateOneUserInput
  skip: Int
  clientMutationId: String
}

type RemoveByIdUserPayload {
  recordId: MongoID
  record: User
  nodeId: ID
  clientMutationId: String
}

type RemoveManyUserPayload {
  numAffected: Int
  nodeId: ID
  clientMutationId: String
}

type RemoveOneUserPayload {
  recordId: MongoID
  record: User
  nodeId: ID
  clientMutationId: String
}

type RootMutation {
  userCreate(input: RelayCreateOneUserInput!): CreateOneUserPayload
  userUpdateById(input: RelayUpdateByIdUserInput!): UpdateByIdUserPayload
  userUpdateOne(input: RelayUpdateOneUserInput!): UpdateOneUserPayload
  userUpdateMany(input: RelayUpdateManyUserInput!): UpdateManyUserPayload
  userRemoveById(input: RelayRemoveByIdUserInput!): RemoveByIdUserPayload
  userRemoveOne(input: RelayRemoveOneUserInput!): RemoveOneUserPayload
  userRemoveMany(input: RelayRemoveManyUserInput!): RemoveManyUserPayload
}

type RootQuery {
  userById(_id: MongoID!): User
  userByIds(_ids: [MongoID]!, limit: Int = 1000, sort: SortFindByIdsUserInput): [User]
  userOne(filter: FilterFindOneUserInput, skip: Int, sort: SortFindOneUserInput): User
  userMany(filter: FilterFindManyUserInput, skip: Int, limit: Int = 1000, sort: SortFindManyUserInput): [User]
  userCount(filter: FilterUserInput): Int
  userConnection(first: Int, after: ConnectionCursor, last: Int, before: ConnectionCursor, filter: FilterFindManyUserInput, sort: SortConnectionUserEnum = _ID_DESC): UserConnection
  node(id: ID!): Node
}

enum SortConnectionUserEnum {
  _ID_DESC
  _ID_ASC
}

enum SortFindByIdsUserInput {
  _ID_ASC
  _ID_DESC
  AGE_ASC
  AGE_DESC
}

enum SortFindManyUserInput {
  _ID_ASC
  _ID_DESC
  AGE_ASC
  AGE_DESC
}

enum SortFindOneUserInput {
  _ID_ASC
  _ID_DESC
  AGE_ASC
  AGE_DESC
}

enum SortRemoveOneUserInput {
  _ID_ASC
  _ID_DESC
  AGE_ASC
  AGE_DESC
}

enum SortUpdateManyUserInput {
  _ID_ASC
  _ID_DESC
  AGE_ASC
  AGE_DESC
}

enum SortUpdateOneUserInput {
  _ID_ASC
  _ID_DESC
  AGE_ASC
  AGE_DESC
}

input UpdateByIdUserInput {
  name: String
  age: Float
  languages: [UserUserLanguagesInput]
  contacts: UserContactsInput
  gender: EnumUserGender
  _id: MongoID!
}

type UpdateByIdUserPayload {
  recordId: MongoID
  record: User
  nodeId: ID
  clientMutationId: String
}

input UpdateManyUserInput {
  name: String
  age: Float
  languages: [UserUserLanguagesInput]
  contacts: UserContactsInput
  gender: EnumUserGender
}

type UpdateManyUserPayload {
  numAffected: Int
  nodeId: ID
  clientMutationId: String
}

input UpdateOneUserInput {
  name: String
  age: Float
  languages: [UserUserLanguagesInput]
  contacts: UserContactsInput
  gender: EnumUserGender
}

type UpdateOneUserPayload {
  recordId: MongoID
  record: User
  nodeId: ID
  clientMutationId: String
}

type User implements Node {
  name: String
  age: Float
  languages: [UserLanguages]
  contacts: UserContacts
  gender: EnumUserGender
  _id: MongoID
  id: ID!
}

type UserConnection {
  count: Int
  pageInfo: PageInfo!
  edges: [UserEdge]
}

type UserContacts {
  email: String
  phones: [String]
}

input UserContactsInput {
  email: String
  phones: [String]
}

type UserEdge {
  node: User
  cursor: ConnectionCursor!
}

type UserLanguages {
  language: String
  skill: EnumUserLanguagesSkill
}

input UserUserLanguagesInput {
  language: String
  skill: EnumUserLanguagesSkill
}
